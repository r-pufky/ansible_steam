---
###############################################################################
# Manager Steam Users
###############################################################################
# Check if user exists and create if enabled.
#
# Args:
#   steam_user: string steam username.
#   steam_group: string steam group.
#   steam_create_user: boolean true to create role default user.
#   steam_default_user: dict containing builitin.user options for steam.
#   steam_default_group: dict containing builitin.group options for steam.

- name: 'manage users | confirm user exists'
  ansible.builtin.command: 'id {{ steam_user }}'
  register: _steam_user_exists
  changed_when: _steam_user_exists.rc > 0
  failed_when: false

- name: 'manage users | confirm group exists'
  ansible.builtin.command: 'groups {{ steam_group }}'
  register: _steam_group_exists
  changed_when: _steam_group_exists.rc > 0
  failed_when: false

- name: 'manage users | create steam group'
  ansible.builtin.group:
    name:  '{{ steam_default_group.name }}'
    gid:   '{{ steam_default_group.gid }}'
    state: 'present'
  when: steam_create_user and _steam_group_exists.rc != 0

- name: 'manage users | create steam user (logins disabled)'
  ansible.builtin.user:
    name:            '{{ steam_default_user.name }}'
    group:           '{{ steam_default_user.group }}'
    uid:             '{{ steam_default_user.uid }}'
    shell:           '{{ steam_default_user.shell }}'
    home:            '{{ steam_default_user.home }}'
    create_home:     '{{ steam_default_user.create_home }}'
    password:        '{{ steam_default_user.password }}'
    password_lock:   '{{ steam_default_user.password_lock }}'
    update_password: '{{ steam_default_user.update_password }}'
    expires:         '{{ steam_default_user.expires }}'
    state:           'present'
  when: steam_create_user and _steam_user_exists.rc != 0
